#ifndef BOARD_H_INCLUDED
#define BOARD_H_INCLUDED

#include "peg.h"
#include <vector>
#include <unordered_map>
#include <iostream>
#include <iomanip>

using namespace std;

/* A virtual board denotes the physical master mind board */
class GameBoard
{

private:
    /* Number of rows in board == number of attempts */
    unsigned int num_rows;

    /* Number of pegs in a row */
    unsigned int pegs_in_row;

    /* Row to denote the code punched by player */
    vector<PegRow> code_rows;

    /* Row to denote feedback provided by code maker */
    vector<PegRow> feedback_rows;

    /* Row to denote shield pegs generated by code maker */
    PegRow shield_pegs_row;

    /* map to store color names */
    unordered_map<int, string> colornames;

    /* Helper init function */
    void init();

    /* Function to generate a random number */
    PegColor get_random_color();

    /* Returns a code peg row at index ( row position ) */
    vector<Peg>& get_code_peg_row(unsigned int row_idx);

    /* Returns a feedback peg row at index ( row position ) */
    vector<Peg>& get_feedback_peg_row(unsigned int row_idx);

    /* Function to set a peg in shield peg row */
    bool set_shield_peg(unsigned int peg_idx, Peg &peg);

    /* Returns a shield peg at index */
    Peg& get_shield_peg(unsigned int peg_idx);

    /* Function to check whether a peg color exist exist in shield */
    bool check_color_exist_in_shield(PegColor color);

public:

    /* Constructor to create a game board with rows and pegs */
    GameBoard(unsigned int _num_rows, unsigned int _num_pegs);
    ~GameBoard() {}

    /* delete default copy constructor and assignment operator*/
    GameBoard(GameBoard &other) = delete;
    void operator=(GameBoard &other) = delete;

    /* delete default move constructor and move assignment operator*/
    GameBoard(GameBoard &&other) = delete;
    void operator=(GameBoard &&other) = delete;

    /* Get the string representation from color code */
    string get_color_name(PegColor clr);

    /* Returns the PegColor from numeric code */
    PegColor get_color_code(int code);

    /* Set code peg in a particular row at particular index in a board */
    bool set_code_peg(unsigned int row_idx, unsigned int peg_idx, Peg &peg);

    /* Get code peg in a particular row at particular index in a board */
    Peg& get_code_peg(unsigned int row_idx, unsigned int peg_idx);

    /* Set feedback peg in a particular row at particular index in a board */
    bool set_feedback_peg(unsigned int row_idx, unsigned int peg_idx, Peg &peg);

    /* Get feedback peg in a particular row at particular index in a board */
    Peg& get_feedback_peg(unsigned int row_idx, unsigned int peg_idx);

    /* Function to generate a shield code. To be used by code maker */
    void create_shield_code();

    /* Function to display shield code. Only used during testing purpose */
    void display_shield_code();

    /* Function to verify code pegs entered by player */
    bool verify_guess(int attempt);

    /* Display the color name of code peg at index */
    void display_code_pegs(unsigned int idx);

    /* Display the color name of feedback peg at index */
    void display_feeback_code(unsigned int idx);


};



#endif //
